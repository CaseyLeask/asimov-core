@import "asimov/asimov";

$default: ();
$settings: ();

@function assert($condition) {
    @return if($condition, true, false);
}


// ==========================================================================
// Internal API
// ==========================================================================

$default: (
    "base": "red",
    "foo": "bar",
    "bar": "baz",

    "one": (
        "base": "eno",
        "bar": "baz",
        "bar-bell": "bazzab",

        "baz": (
            "base": "blue",
            "boo": "bam",
            "boo-who": "bammab",
        ),
    ),

    "one-time": (
        "base": "eno",
        "bar": "baz",
        "bar-bell": "bazzab",

        "baz": (
            "base": "blue",
            "boo": "bam",
            "boo-who": "bammab",
        ),
    ),
) !global;


basic {
    $settings: set($default) !global;
    $data: get-component-map("map", $settings, false);

    base: lookup($data, "base");
    foo: lookup($data, "foo");
    bar: lookup($data, "bar");

}

basic--flat {
    $settings: set($default) !global;
    $data: get-component-map("map", $settings, true);

    base: lookup($data, "base");
    foo: lookup($data, "foo");
    bar: lookup($data, "bar");
    one: lookup($data, "one");

    one\/base: lookup($data, "one/base");
    one\/bar: lookup($data, "one/bar");
    one\/bar-bell: lookup($data, "one/bar-bell");

    one\/baz: lookup($data, "one/baz");
    one\/baz\/base: lookup($data, "one/baz/base");
    one\/baz\/boo: lookup($data, "one/baz/boo");
    one\/baz\/boo-who: lookup($data, "one/baz/boo-who");
}


// ==========================================================================
// Settings API
// ==========================================================================

$default: (
    foo: (
        bar: (
            bat: "boom",
            baz: "boo",
        ),
    ),
) !global;

settings-get {
    $settings: () !global;
    $settings: set($default) !global;

    set-new: assert(get("foo/bar/baz") == "boo");
}

settings-set {
    $settings: () !global;
    $settings: set($default) !global;

    $set: set("foo/bar/bam", "test");
    set-new: assert(get("foo/bar/bam") == "test");

    $set: set("foo/bar/baz", "test");
    update: assert(get("foo/bar/baz") == "test");

    $set: set("foo/bar/bam", null);
    remove: assert(get("foo/bar/bam") == null);

    not-clobbered: assert(
        get("foo/bar/bat") == "boom" and
        get("foo/bar/baz") == "test" and
        get("foo/bar/bam") == null
    );

    $set: set("does/not/exists", "woot");
    create-root: assert(get("does/not/exists") == "woot");
}

settings-set-map {
    $settings: () !global;
    $settings: set($default) !global;

    $settings: set((
        foo: (
            bar: (
                bat: "woop",
                door: "more"
            ),
            floor: (
                chore: "lore"
            ),
            who: "you?"
        ),
        this: (
            is: (
                new: "you!",
                who: "me?"
            )
        )
    )) !global;

    set-map: assert(
        get("foo/bar/baz") == "boo" and
        get("foo/bar/bat") == "woop" and
        get("foo/bar/door") == "more" and
        get("foo/floor/chore") == "lore" and
        get("foo/who") == "you?" and
        get("this/is/new") == "you!" and
        get("this/is/who") == "me?"
    );
}

settings-set-default {
    $settings: () !global;
    $settings: set($default) !global;

    $set: set-default("foo/bar/bam", "test");
    set-new: assert(get("foo/bar/bam") == "test");

    $set: set-default("foo/bar/baz", "test");
    cant-update: assert(get("foo/bar/baz") == "boo");

    $set: set-default("foo/bar/bam", null);
    cant-remove: assert(get("foo/bar/bam") == "test");

    not-clobbered: assert(
        get("foo/bar/bat") == "boom" and
        get("foo/bar/baz") == "boo" and
        get("foo/bar/bam") == "test"
    );
}

settings-set-default-map {
    $settings: () !global;
    $settings: set($default) !global;

    $settings: set-default((
        foo: (
            bar: (
                bat: "woop",
                door: "more"
            ),
            floor: (
                chore: "lore"
            ),
            who: "you?"
        ),
        this: (
            is: (
                new: "you!",
                who: "me?"
            )
        )
    )) !global;

    set-map: assert(
        get("foo/bar/baz") == "boo" and
        get("foo/bar/bat") == "boom" and
        get("foo/bar/door") == "more" and
        get("foo/floor/chore") == "lore" and
        get("foo/who") == "you?" and
        get("this/is/new") == "you!" and
        get("this/is/who") == "me?"
    );
}


// ==========================================================================
// Colors API
// ==========================================================================

$default: (
    colors: (
        primary: red,
        secondary: #0f0,
    ),
) !global;

colors-get {
    $settings: () !global;
    $settings: set($default) !global;

    get-primary: assert(get("colors/primary") == red);
    get-color-primary: assert(get-color("primary") == red);
    get-secondary: assert(get("colors/secondary") == #0f0);
    get-color-secondary: assert(get-color("secondary") == #0f0);
}

colors-set {
    $settings: () !global;
    $settings: set($default) !global;

    get-tertiary: assert(get("colors/tertiary") == null);
    get-color-tertiary: assert(get-color("tertiary") == null);

    set-color-tertiary: assert(set-color("tertiary", #00f) == #00f);

    get-tertiary-after-set: assert(get("colors/tertiary") == #00f);
    get-color-tertiary-after-set: assert(get-color("tertiary") == #00f);
}


// ==========================================================================
// Spacing API
// ==========================================================================

$default: (
    spacings: (
        primary: 10px,
        secondary: 2em,
    ),
) !global;

spacings-get {
    $settings: () !global;
    $settings: set($default) !global;

    get-primary: assert(get("spacings/primary") == 10px);
    get-spacing-primary: assert(get-spacing("primary") == 10px);
    get-secondary: assert(get("spacings/secondary") == 2em);
    get-spacing-secondary: assert(get-spacing("secondary") == 2em);
}

spacings-set {
    $settings: () !global;
    $settings: set($default) !global;

    get-tertiary: assert(get("spacings/tertiary") == null);
    get-spacing-tertiary: assert(get-spacing("tertiary") == null);

    set-spacing-tertiary: assert(set-spacing("tertiary", 3%) == 3%);

    get-tertiary-after-set: assert(get("spacings/tertiary") == 3%);
    get-spacing-tertiary-after-set: assert(get-spacing("tertiary") == 3%);
}


// ==========================================================================
// Font API
// ==========================================================================

$default: (
    font-sizes: (
        primary: 10px,
        secondary: 2em,
    ),
    font-families: (
        primary: ("Times New Roman", Times, serif),
        secondary: "Arial Black",
    ),
) !global;

font-sizes-get {
    $settings: () !global;
    $settings: set($default) !global;

    get-primary: assert(get("font-sizes/primary") == 10px);
    get-font-size-primary: assert(get-font-size("primary") == 10px);
    get-secondary: assert(get("font-sizes/secondary") == 2em);
    get-font-size-secondary: assert(get-font-size("secondary") == 2em);
}

font-sizes-set {
    $settings: () !global;
    $settings: set($default) !global;

    get-tertiary: assert(get("font-sizes/tertiary") == null);
    get-font-size-tertiary: assert(get-font-size("tertiary") == null);

    set-font-size-tertiary: assert(set-font-size("tertiary", 3%) == 3%);

    get-tertiary-after-set: assert(get("font-sizes/tertiary") == 3%);
    get-font-size-tertiary-after-set: assert(get-font-size("tertiary") == 3%);
}

font-families-get {
    $settings: () !global;
    $settings: set($default) !global;

    get-primary: assert(get("font-families/primary") == ("Times New Roman", Times, serif));
    get-font-family-primary: assert(get-font-family("primary") == ("Times New Roman", Times, serif));
    get-secondary: assert(get("font-families/secondary") == ("Arial Black"));
    get-font-family-secondary: assert(get-font-family("secondary") == ("Arial Black"));
}

font-families-set {
    $settings: () !global;
    $settings: set($default) !global;

    get-tertiary: assert(get("font-families/tertiary") == null);
    get-font-family-tertiary: assert(get-font-family("tertiary") == null);

    set-font-family-tertiary: assert(set-font-family("tertiary", (Arial, Helvetica, sans-serif)) == (Arial, Helvetica, sans-serif));

    get-tertiary-after-set: assert(get("font-families/tertiary") == (Arial, Helvetica, sans-serif));
    get-font-family-tertiary-after-set: assert(get-font-family("tertiary") == (Arial, Helvetica, sans-serif));
}
