
// =============================================================================
// Fonts Families
// =============================================================================

// Set the font-family $value associated to $name.
// If $name already exists it will be over written.
// Returns the new value of $name.
// -----------------------------------------------------------------------------
// @param $key [String] : $name
// @param $value [Color] : $value
// @param $default [Bool] : whether to merge
// -----------------------------------------------------------------------------
// @return [String|List]
@function set-font-family($name, $value, $default:false) {
    @if $default {
        @return set-default("asimov/font-families/#{$name}", $value, "asimov/font-families");
    }

    @return set("asimov/font-families/#{$name}", $value, "asimov/font-families");
}


// Get the font-family value associated with $name.
// If $name is a list then it is returned.
// -----------------------------------------------------------------------------
// @param $key [String|List] : $name
// -----------------------------------------------------------------------------
// @return [List|Null]
@function get-font-family($name) {
    @if type-of($name) == list {
        @return $name;
    }

    @return get($name, get-font-families());
}


// Set multiple font-families at once.
// If $default is true $map will be merged with existing font-families.
// If $default is false $map will override all existing font-families.
// Returns a map of all current font-families.
// -----------------------------------------------------------------------------
// @param $key [Map] : $name
// @param $default [Bool] : whether to merge
// -----------------------------------------------------------------------------
// @return [Map]
@function set-font-families($map, $default:false) {
    @if $default {
        @if set-default((asimov: (font-families: $map)), "asimov/font-families") == null {
            @warn("Something went wrong!");
        }
    }

    // Reset the currently settings because `set` will merge by default
    @else if
        set("asimov/font-families", ()) == null or
        set("asimov/font-families", $map, "asimov/font-sizes") == null
    {
        @warn("Something went wrong!");
    }

    @return get-font-families();
}


// Gets a map of named font-families and their values.
// -----------------------------------------------------------------------------
// @return [Map]
@function get-font-families() {
    @return get("asimov/font-families");
}


// =============================================================================
// Fonts Sizes
// =============================================================================

// Set the font-size $value associated to $name.
// If $name already exists it will be over written.
// Returns the new value of $name.
// -----------------------------------------------------------------------------
// @param $key [String] : $name
// @param $value [Color] : $value
// @param $default [Bool] : whether to merge
// -----------------------------------------------------------------------------
// @return [Number]
@function set-font-size($name, $value, $default:false) {
    @if $default {
        $value: set-default("asimov/font-sizes/#{$name}", $value, "asimov/font-sizes");
    } @else {
        $value: set("asimov/font-sizes/#{$name}", $value, "asimov/font-sizes");
    }


    // Some third party libraries depend on root font-size
    @if $name == "root" {
        // Media query library config
        //
        // https://github.com/Team-Sass/breakpoint/wiki/Basic-Media-Queries#em-based-media-queries
        $breakpoint-base-font-size: $value !global;
    }

    @return $value;
}


// Get the font-family value associated with $name.
// If $name is a number then it is returned.
// -----------------------------------------------------------------------------
// @param $key [String] : $name
// -----------------------------------------------------------------------------
// @return [Number|Null]
@function get-font-size($name) {
    @if type-of($name) == number {
        @return $name;
    }

    @return get($name, get-font-sizes());
}


// Set multiple font-sizes at once.
// If $default is true $map will be merged with existing font-sizes.
// If $default is false $map will override all existing font-sizes.
// Returns a map of all current font-sizes.
// -----------------------------------------------------------------------------
// @param $key [Map] : $name
// @param $default [Bool] : whether to merge
// -----------------------------------------------------------------------------
// @return [Map]
@function set-font-sizes($map, $default:false) {
    @if $default {
        @if set-default((asimov: (font-sizes: $map)), "asimov/font-sizes") == null {
            @warn("Something went wrong!");
        }
    }

    // Reset the currently settings because `set` will merge by default
    @else if
        set("asimov/font-sizes", ()) == null or
        set("asimov/font-sizes", $map, "asimov/font-sizes") == null
    {
        @warn("Something went wrong!");
    }

    @return get-font-sizes();
}


// Gets a map of named font-sizes and their values.
// -----------------------------------------------------------------------------
// @return [Map]
@function get-font-sizes() {
    @return get("asimov/font-sizes");
}

